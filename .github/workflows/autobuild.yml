# I have no idea what I'm doing
name: Automatic Build

on:
  push:
    tags:
      - 'reborn-[0-9]+.[0-9]+.[0-9]+'
      - 'rejuvenation-[0-9]+.[0-9]+.[0-9]+'
      - 'desolation-[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          install: >-
            base-devel
            git
            ruby
            vim
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-meson
            mingw-w64-ucrt-x86_64-autotools
            mingw-w64-ucrt-x86_64-gcc


      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Game
        id: game
        run: echo ("game=" + $env:GITHUB_REF.replace('refs/tags/', '').split('-')[0]) >> $env:GITHUB_OUTPUT

      - name: Icon
        run: |
          cp icons/${{ steps.game.outputs.game }}.ico windows/icon.ico
          cp icons/${{ steps.game.outputs.game }}.png assets/icon.png

      - uses: actions/cache@v3
        with:
          path: |
            windows/build-mingw64
            windows/downloads
          key: win-${{ hashFiles('windows/Makefile') }}

      - name: Build all dependencies
        shell: msys2 {0}
        working-directory: windows
        run: make

      - name: Build exe
        shell: msys2 {0}
        run: |
          source windows/vars.sh
          meson build
          cd build
          ninja
          strip ./mkxp-z.exe

      - name: Prepare archive
        shell: msys2 {0}
        run: |
          mkdir build/artifact
          cd build/artifact
          cp /ucrt64/bin/zlib1.dll .
          cp ../../windows/build-mingw64/bin/x64-ucrt-ruby310.dll .
          cp ../../windows/build-mingw64/bin/libcrypto-3-x64.dll .
          cp ../../windows/build-mingw64/bin/libssl-3-x64.dll .
          cp -r ../../windows/build-mingw64/lib/ruby/3.1.0 .
          mv ./3.1.0 ./stdlib
          cp ../mkxp-z.exe .
          cp ../../mkxp.json .

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}
          path: |
            build/artifact/*.dll
            build/artifact/*.exe
            build/artifact/mkxp.json
            build/artifact/stdlib/

  build-linux:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Game
        id: game
        run: echo game=$(echo ${{ github.ref_name }}| cut -d- -f1) >> $GITHUB_OUTPUT

      - name: Icon
        run: |
          cp icons/${{ steps.game.outputs.game }}.png linux/mkxp-z.png
          cp icons/${{ steps.game.outputs.game }}.png assets/icon.png

      - uses: actions/cache@v3
        with:
          path: |
            linux/build-x86_64
            linux/downloads
          key: lin-${{ hashFiles('linux/Makefile') }}

      - name: Install apt dependencies
        run: |
          sudo apt update
          sudo apt install libfuse2 git build-essential cmake meson autoconf automake libtool pkg-config ruby bison zlib1g-dev libbz2-dev xorg-dev libgl1-mesa-dev libasound2-dev libpulse-dev -y

      - name: Build everything else
        working-directory: linux
        run: make

      - name: Download AppImageKit
        uses: MrOctopus/download-asset-action@1.1
        with:
          repository: AppImage/AppImageKit
          tag: 13
          asset: appimagetool-x86_64.AppImage

      - name: Build executable
        run: |
          source linux/vars.sh
          chmod +x appimagetool-x86_64.AppImage
          meson build --bindir=usr/bin --prefix=$GITHUB_WORKSPACE/build/local -Dappimage=true -Dappimagekit_path=$PWD/appimagetool-x86_64.AppImage
          cd build
          ninja
          ninja install

      - name: Prepare archive
        run: |
          cd build/local
          cp -r ../../linux/build-x86_64/lib/ruby/3.1.0 .
          mv ./3.1.0 ./stdlib
          cp ../../mkxp.json .

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}
          path: |
            build/local/**
            build/mkxp-z-x86_64.AppImage

  build-macos:
    name: MacOS
    runs-on: macos-latest
    steps:
      - name: Remove pre-existing homebrew packages
        run: brew remove --force $(brew list)

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Game
        id: game
        run: echo game=$(echo ${{ github.ref_name }}| cut -d- -f1) >> $GITHUB_OUTPUT

      - name: Icon
        run: |
          cp icons/${{ steps.game.outputs.game }}.icns macos/icon.icns
          cp icons/${{ steps.game.outputs.game }}.png assets/icon.png

      - uses: actions/cache@v3
        with:
          path: |
            macos/Dependencies/build-macosx-x86_64
            macos/Dependencies/build-macosx-arm64
            macos/Dependencies/build-macosx-universal
            macos/Dependencies/downloads
          key: mac-${{ hashFiles('macos/Dependencies/*.make', 'macos/Dependencies/*.sh') }}

      - name: Install Homebrew tools
        working-directory: macos/Dependencies
        run: brew bundle

      - name: Build all dependencies
        working-directory: macos/Dependencies
        run: ./setup.sh

      - name: Build app
        working-directory: macos
        run: xcodebuild -project mkxp-z.xcodeproj -configuration "Release" -scheme "Universal" -derivedDataPath "$GITHUB_WORKSPACE/build"

      - name: Compress app
        working-directory: build/Build/Products/Release
        run: ditto -c -k --sequesterRsrc --keepParent Z-universal.app Z-universal.app.zip

      - name: Upload archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}
          path: build/Build/Products/Release/Z-universal.app.zip

  release:
    name: Release
    runs-on: "ubuntu-latest"
    needs:
      - build-windows
      - build-linux
      - build-macos
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build-windows
          path: windows

      - uses: actions/download-artifact@v3
        with:
          name: build-linux
          path: linux

      - uses: actions/download-artifact@v3
        with:
          name: build-macos
          path: macos

      - name: Zip Folder
        run: |
          cd windows
          rm -f mkxp.json
          mv mkxp-z.exe Game.exe
          zip -r ../mkxp-z.windows.zip Game.exe *.dll stdlib
          cd ../linux
          mv mkxp-z-x86_64.AppImage Game.AppImage
          mv local/stdlib stdlib
          zip -r ../mkxp-z.linux.zip Game.AppImage stdlib
          cd ..
          mv macos/Z-universal.app.zip mkxp-z.macos.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          fail_on_unmatched_files: true
          files: |
            mkxp-z.windows.zip
            mkxp-z.linux.zip
            mkxp-z.macos.zip
